https://www.cnblogs.com/dongqinnanren/p/6839319.html

// create client instance 
MqttClient client = new MqttClient(IPAddress.Parse(MQTT_BROKER_ADDRESS)); 

// register to message received 
client.MqttMsgPublishReceived += client_MqttMsgPublishReceived; 

string clientId = Guid.NewGuid().ToString(); 
client.Connect(clientId); 

// subscribe to the topic "/home/temperature" with QoS 2 
client.Subscribe(new string[] { "/home/temperature" }, new byte[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE }); 

... 

static void client_MqttMsgPublishReceived(object sender, MqttMsgPublishEventArgs e) 
{ 
// handle message received 
}

---------------------------------------
public class MqttClientService
{

	private static volatile MqttClientService _instance = null;

	private static readonly object LockHelper = new object();

	/// <summary>
	/// 创建单例模式
	/// </summary>
	/// <param name="ipAddress"></param>
	/// <returns></returns>
	public static MqttClientService CreateInstance(string ipAddress)
	{
		if (_instance == null)
		{
			lock (LockHelper)
			{
				if (_instance == null)
					_instance = new MqttClientService(ipAddress);
			}
		}
		return _instance;
	}

	/// <summary>
	/// 实例化订阅客户端
	/// </summary>
	public MqttClient SubscribeClient { get; set; }


	public Action<Object, MqttMsgPublishEventArgs> ClientPublishReceivedAction { get; set; }

	public MqttClientService(string ipAddress)
	{
		// create client instance 
		SubscribeClient = new MqttClient(IPAddress.Parse(ipAddress));

		// register to message received 
		SubscribeClient.MqttMsgPublishReceived += client_MqttMsgPublishReceived;

		string clientId = Guid.NewGuid().ToString();

		SubscribeClient.Connect(clientId);

		// subscribe to the topic "/home/temperature" with QoS 2 
		SubscribeClient.Subscribe(new string[] { "avatar/uploaded" }, new byte[] { MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE });
	}

	void client_MqttMsgPublishReceived(object sender, MqttMsgPublishEventArgs e)
	{
		// handle message received 
		ClientPublishReceivedAction.Invoke(sender, e);
	}

	public void client_MqttMsgPublish(string publishString)
	{
		SubscribeClient.Publish("avatar/signed", Encoding.UTF8.GetBytes(publishString), MqttMsgBase.QOS_LEVEL_EXACTLY_ONCE, false);
	}
}